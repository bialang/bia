#include "virtual_machine_code.hpp"
#include "op_code.hpp"
#include "create_member.hpp"
#include "member_array_view.hpp"
#include "machine_context.hpp"
#include "virtual_disassembler.hpp"
#include "regex_member.hpp"
#include "scope_exit.hpp"
#include "schein.hpp"
#include "bia_function.hpp"
#include "undefined_member.hpp"

#include <cstring>


namespace bia
{
namespace machine
{
namespace virtual_machine
{

virtual_machine_code::virtual_machine_code(memory::universal_allocation _code, memory::allocation<schein> && _schein, bool _take_ownership) : _schein(_schein)
{
	// Copy buffer
	if (!_take_ownership) {
		auto _tmp = _schein->machine_context()->allocator()->allocate(_code.second);

		std::memcpy(_tmp.first, _code.first, _code.second);

		_code = _tmp;
	}

	this->_code = memory::cast_allocation<uint8_t>(_code);
}

virtual_machine_code::virtual_machine_code(virtual_machine_code && _move) : _schein(std::move(_move._schein))
{
	_code = std::move(_move._code);

	_move.clear();
}

virtual_machine_code::~virtual_machine_code()
{
	clear();
}

void virtual_machine_code::execute(stack & _stack, return_t & _return)
{
	auto & _globals = _schein->globals();
	auto & _names = _schein->names();
	auto & _string_manager = _schein->string_manager();
	auto & _regexs = _schein->regexs();
	auto & _functions = _schein->functions();
	const auto _end = _code.first + _code.second;
	const uint8_t * _cursor = _code.first;
	framework::member::test_result_t _test_register = 0;

	// Setup stack
	auto _stack_cleaner = utility::make_scope_exit([_stack_frame = _stack.create_stack_frame(), &_stack]() {
		_stack.drop_stack_frame(_stack_frame);
	});
	member_array_view _temps(_stack.allocate_space(_schein->setup_count() * framework::max_member_size), _schein->setup_count());

	_return.create<framework::undefined_member>();

	while (_cursor < _end) {
		auto _operation = read<op_code_t>(_cursor);

		/*********GENERATED BY 'generateVM.py'**********/
		switch (_operation) {
		/** P-Type */
		case (OC_RETURN_VOID):
		{
			goto gt_return;
			break;
		}
		case (OC_PUSH_TEST):
		{
			_stack.push(_test_register);
			break;
		}
		/** int-Type */
		case (OC_JUMP - IIOCO_INT32):
		{
			auto _int = read<int32_t>(_cursor);
			_cursor += _int;
			break;
		}
		case (OC_JUMP - IIOCO_INT8):
		{
			auto _int = read<int8_t>(_cursor);
			_cursor += _int;
			break;
		}
		case (OC_JUMP_TRUE - IIOCO_INT32):
		{
			auto _int = read<int32_t>(_cursor);
			_cursor += _test_register ? _int : 0;
			break;
		}
		case (OC_JUMP_TRUE - IIOCO_INT8):
		{
			auto _int = read<int8_t>(_cursor);
			_cursor += _test_register ? _int : 0;
			break;
		}
		case (OC_JUMP_FALSE - IIOCO_INT32):
		{
			auto _int = read<int32_t>(_cursor);
			_cursor += _test_register ? 0 : _int;
			break;
		}
		case (OC_JUMP_FALSE - IIOCO_INT8):
		{
			auto _int = read<int8_t>(_cursor);
			_cursor += _test_register ? 0 : _int;
			break;
		}
		/** I-Type */
		case (OC_RETURN_IMMEDIATE - IOCO_INT32):
		{
			auto _immediate = read<int32_t>(_cursor);
			framework::create_member(_return.get(), _immediate);
			goto gt_return;
			break;
		}
		case (OC_RETURN_IMMEDIATE - IOCO_INT8):
		{
			auto _immediate = read<int8_t>(_cursor);
			framework::create_member(_return.get(), _immediate);
			goto gt_return;
			break;
		}
		case (OC_RETURN_IMMEDIATE - IOCO_INT64):
		{
			auto _immediate = read<int64_t>(_cursor);
			framework::create_member(_return.get(), _immediate);
			goto gt_return;
			break;
		}
		case (OC_RETURN_IMMEDIATE - IOCO_FLOAT):
		{
			auto _immediate = read<double>(_cursor);
			framework::create_member(_return.get(), _immediate);
			goto gt_return;
			break;
		}
		case (OC_RETURN_IMMEDIATE - IOCO_STRING):
		{
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			framework::create_member(_return.get(), _immediate);
			goto gt_return;
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_INT32):
		{
			auto _immediate = read<int32_t>(_cursor);
			_stack.push(_immediate);
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_INT8):
		{
			auto _immediate = read<int8_t>(_cursor);
			_stack.push(_immediate);
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_INT64):
		{
			auto _immediate = read<int64_t>(_cursor);
			_stack.push(_immediate);
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_FLOAT):
		{
			auto _immediate = read<double>(_cursor);
			_stack.push(_immediate);
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_STRING):
		{
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			_stack.push(_immediate);
			break;
		}
		/** M-Type */
		case (OC_RETURN - MOCO_TINY_TEMPORARY):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			_member->refer(_return.get());
			goto gt_return;
			break;
		}
		case (OC_RETURN - MOCO_TINY_PERMANENT):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			_member->refer(_return.get());
			goto gt_return;
			break;
		}
		case (OC_RETURN - MOCO_TEMPORARY):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			_member->refer(_return.get());
			goto gt_return;
			break;
		}
		case (OC_RETURN - MOCO_PERMANENT):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			_member->refer(_return.get());
			goto gt_return;
			break;
		}
		case (OC_TEST - MOCO_TINY_TEMPORARY):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			_test_register = _member->test();
			break;
		}
		case (OC_TEST - MOCO_TINY_PERMANENT):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			_test_register = _member->test();
			break;
		}
		case (OC_TEST - MOCO_TEMPORARY):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			_test_register = _member->test();
			break;
		}
		case (OC_TEST - MOCO_PERMANENT):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			_test_register = _member->test();
			break;
		}
		case (OC_PUSH - MOCO_TINY_TEMPORARY):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			_stack.push(_member);
			break;
		}
		case (OC_PUSH - MOCO_TINY_PERMANENT):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			_stack.push(_member);
			break;
		}
		case (OC_PUSH - MOCO_TEMPORARY):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			_stack.push(_member);
			break;
		}
		case (OC_PUSH - MOCO_PERMANENT):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			_stack.push(_member);
			break;
		}
		case (OC_UNDEFINE - MOCO_TINY_TEMPORARY):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			_member->undefine();
			break;
		}
		case (OC_UNDEFINE - MOCO_TINY_PERMANENT):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			_member->undefine();
			break;
		}
		case (OC_UNDEFINE - MOCO_TEMPORARY):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			_member->undefine();
			break;
		}
		case (OC_UNDEFINE - MOCO_PERMANENT):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			_member->undefine();
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_TINY_TEMPORARY):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			_member->execute(&_stack, nullptr);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_TINY_PERMANENT):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			_member->execute(&_stack, nullptr);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_TEMPORARY):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			_member->execute(&_stack, nullptr);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_PERMANENT):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			_member->execute(&_stack, nullptr);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_TINY_TEMPORARY):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member->execute_count(&_stack, nullptr, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_TINY_PERMANENT):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member->execute_count(&_stack, nullptr, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_TEMPORARY):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member->execute_count(&_stack, nullptr, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_PERMANENT):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member->execute_count(&_stack, nullptr, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_TINY_TEMPORARY):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member->execute_format(&_stack, nullptr, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_TINY_PERMANENT):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member->execute_format(&_stack, nullptr, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_TEMPORARY):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member->execute_format(&_stack, nullptr, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_PERMANENT):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member->execute_format(&_stack, nullptr, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		/** Mint-Type */
		case (OC_INSTANTIATE_REGEX - (MOCO_TINY_TEMPORARY * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member->template replace_this<framework::native::regex_member>(_regexs[_int]);
			break;
		}
		case (OC_INSTANTIATE_REGEX - (MOCO_TINY_TEMPORARY * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member->template replace_this<framework::native::regex_member>(_regexs[_int]);
			break;
		}
		case (OC_INSTANTIATE_REGEX - (MOCO_TINY_PERMANENT * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member->template replace_this<framework::native::regex_member>(_regexs[_int]);
			break;
		}
		case (OC_INSTANTIATE_REGEX - (MOCO_TINY_PERMANENT * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member->template replace_this<framework::native::regex_member>(_regexs[_int]);
			break;
		}
		case (OC_INSTANTIATE_REGEX - (MOCO_TEMPORARY * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member->template replace_this<framework::native::regex_member>(_regexs[_int]);
			break;
		}
		case (OC_INSTANTIATE_REGEX - (MOCO_TEMPORARY * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member->template replace_this<framework::native::regex_member>(_regexs[_int]);
			break;
		}
		case (OC_INSTANTIATE_REGEX - (MOCO_PERMANENT * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member->template replace_this<framework::native::regex_member>(_regexs[_int]);
			break;
		}
		case (OC_INSTANTIATE_REGEX - (MOCO_PERMANENT * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member->template replace_this<framework::native::regex_member>(_regexs[_int]);
			break;
		}
		case (OC_INSTANTIATE_FUNCTION - (MOCO_TINY_TEMPORARY * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member->template replace_this<framework::executable::bia_function>(_functions[_int]);
			break;
		}
		case (OC_INSTANTIATE_FUNCTION - (MOCO_TINY_TEMPORARY * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member->template replace_this<framework::executable::bia_function>(_functions[_int]);
			break;
		}
		case (OC_INSTANTIATE_FUNCTION - (MOCO_TINY_PERMANENT * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member->template replace_this<framework::executable::bia_function>(_functions[_int]);
			break;
		}
		case (OC_INSTANTIATE_FUNCTION - (MOCO_TINY_PERMANENT * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member->template replace_this<framework::executable::bia_function>(_functions[_int]);
			break;
		}
		case (OC_INSTANTIATE_FUNCTION - (MOCO_TEMPORARY * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member->template replace_this<framework::executable::bia_function>(_functions[_int]);
			break;
		}
		case (OC_INSTANTIATE_FUNCTION - (MOCO_TEMPORARY * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member->template replace_this<framework::executable::bia_function>(_functions[_int]);
			break;
		}
		case (OC_INSTANTIATE_FUNCTION - (MOCO_PERMANENT * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member->template replace_this<framework::executable::bia_function>(_functions[_int]);
			break;
		}
		case (OC_INSTANTIATE_FUNCTION - (MOCO_PERMANENT * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member->template replace_this<framework::executable::bia_function>(_functions[_int]);
			break;
		}
		/** MM-Type */
		case (OC_EXECUTE - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->execute(&_stack, _member1);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			_member0->execute_count(&_stack, _member1, nullptr, _count);
			_stack.pop_count(_count);
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			if (_cursor + _count > _end) {
				BIA_IMPLEMENTATION_ERROR;
			}
			_member0->execute_format(&_stack, _member1, reinterpret_cast<const char*>(_cursor), _count);
			_stack.pop_count(_count);
			_cursor += _count;
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_CLONE - (MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->clone(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_REFER - (MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->refer(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_COPY - (MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			_member0->copy(_member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = _member0->test_member(_operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(nullptr, _operator, _member1);
			break;
		}
		/** MI-Type */
		case (OC_INSTANTIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			framework::create_member(_member, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			_test_register = test_reverse(_member, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMPORARY * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_PERMANENT * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member, nullptr, _operator, _immediate);
			break;
		}
		/** MMint-Type */
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int32_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _int = read<int8_t>(_cursor);
			_member0->object_member(_member1, _names[_int]);
			break;
		}
		/** MMM-Type */
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TINY_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TINY_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_TEMPORARY)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _temps[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * MOCO_COUNT + MOCO_PERMANENT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _member2 = _globals[read<member_index_t>(_cursor)];
			auto _operator = read<framework::operator_t>(_cursor);
			_member0->operator_call(_member1, _operator, _member2);
			break;
		}
		/** MMI-Type */
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMPORARY * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _temps[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TINY_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<tiny_member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_TEMPORARY) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _temps[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_PERMANENT * MOCO_COUNT + MOCO_PERMANENT) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = _globals[read<member_index_t>(_cursor)];
			auto _member1 = _globals[read<member_index_t>(_cursor)];
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			operator_call_reverse(_member0, _member1, _operator, _immediate);
			break;
		}
		default:
			BIA_IMPLEMENTATION_ERROR;
		}
		/*********GENERATED BY 'generateVM.py'**********/
	}

gt_return:;
}

void virtual_machine_code::clear()
{
	if (_code) {
		auto _allocator = _schein->machine_context()->allocator();

		_allocator->deallocate(memory::cast_allocation<void>(_code));
		_allocator->destroy(_schein);

		_code.clear();
		_schein.clear();
	}
}

void virtual_machine_code::disassemble() const
{
	virtual_disassembler::disassemble(memory::cast_allocation<const uint8_t>(_code));
}

bool virtual_machine_code::is_executable() const noexcept
{
	return _code;
}

}
}
}