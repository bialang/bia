#pragma once

#include <cstdint>
#include <cstddef>
#include <utility>

#include "biaMachineSchein.hpp"


namespace bia
{
namespace machine
{

class BiaMachineCode
{
public:
	/**
	 * Constructor.
	 * 
	 * @param	p_machineCode	Defines the machine code generated by a suitable compiler.
	 * @param	p_machineSchein	Defines some details needed for safe execution of the machine code.
	 *
	 * @throws	exception::AllocationException	Thrown when no memory could be allocated.
	 */
	BiaMachineCode(std::pair<const uint8_t*, size_t> p_machineCode, BiaMachineSchein p_machineSchein);
	/**
	 * Move-Constructor.
	 * 
	 * @remarks	The moved object will be invalidated after the operation.
	 * 
	 * @param	[in,out]	p_move	Defines the object that should be moved.
	 */
	BiaMachineCode(BiaMachineCode && p_move);
	BiaMachineCode(const BiaMachineCode&) = delete;
	~BiaMachineCode();

	/**
	 * Executes the machine code.
	 * 
	 * @since	3.42.93.562
	 * @date	14-Dec-2017
	 */
	void Execute() const;
	/**
	 * Checks wheter the parameter passed to the constructor was valid or not.
	 * 
	 * @remarks	This function does not check if the machine code itself is valid.
	 * 
	 * @since	3.42.93.562
	 * @date	14-Dec-2017
	 * 
	 * @return	true if the machine code is valid, otherwise false.
	 */
	bool IsValid();
	BiaMachineCode & operator=(BiaMachineCode && p_move);

private:
	typedef void(*entry_point)();

	BiaAllocator::universal_allocation m_run;	/**	If non-null, defines the entry point of the machine code.	*/

	BiaMachineSchein m_machineSchein;	/**	Defines the machine code details.	*/
};

}
}