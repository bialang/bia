#include "virtual_disassembler.hpp"
#include "op_code.hpp"


namespace bia
{
namespace machine
{
namespace virtual_machine
{
struct a
{
	template<typename Type>
	size_t string(size_t a)
	{
		return a;
	}
};
void virtual_disassembler::disassemble(memory::allocation<const uint8_t> _code)
{
	auto _cursor = _code.first;
	auto _end = _code.first + _code.second;
	a _string_manager;
	

	while (_cursor < _end) {
		auto _operation = read<op_code_t>(_cursor);

		/*********GENERATED BY 'generateVM.py'**********/
		switch (_operation) {
		/** P-Type */
		case (OC_RETURN):
		{
			print_all("ret");
			break;
		}
		case (OC_PUSH_TEST):
		{
			print_all("pusht");
			break;
		}
		/** int-Type */
		case (OC_SETUP - IIOCO_INT32):
		{
			auto _int = read<int32_t>(_cursor);
			print_all("setup i", _int);
			break;
		}
		case (OC_SETUP - IIOCO_INT8):
		{
			auto _int = read<int8_t>(_cursor);
			print_all("setup i", _int);
			break;
		}
		case (OC_JUMP - IIOCO_INT32):
		{
			auto _int = read<int32_t>(_cursor);
			print_all("jmp i", _int);
			break;
		}
		case (OC_JUMP - IIOCO_INT8):
		{
			auto _int = read<int8_t>(_cursor);
			print_all("jmp i", _int);
			break;
		}
		case (OC_JUMP_TRUE - IIOCO_INT32):
		{
			auto _int = read<int32_t>(_cursor);
			print_all("jpt i", _int);
			break;
		}
		case (OC_JUMP_TRUE - IIOCO_INT8):
		{
			auto _int = read<int8_t>(_cursor);
			print_all("jpt i", _int);
			break;
		}
		case (OC_JUMP_FALSE - IIOCO_INT32):
		{
			auto _int = read<int32_t>(_cursor);
			print_all("jpf i", _int);
			break;
		}
		case (OC_JUMP_FALSE - IIOCO_INT8):
		{
			auto _int = read<int8_t>(_cursor);
			print_all("jpf i", _int);
			break;
		}
		/** I-Type */
		case (OC_PUSH_IMMEDIATE - IOCO_INT32):
		{
			auto _immediate = read<int32_t>(_cursor);
			print_all("push i", _immediate);
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_INT8):
		{
			auto _immediate = read<int8_t>(_cursor);
			print_all("push i", _immediate);
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_INT64):
		{
			auto _immediate = read<int64_t>(_cursor);
			print_all("push i", _immediate);
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_FLOAT):
		{
			auto _immediate = read<double>(_cursor);
			print_all("push i", _immediate);
			break;
		}
		case (OC_PUSH_IMMEDIATE - IOCO_STRING):
		{
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			print_all("push i", _immediate);
			break;
		}
		/** M-Type */
		case (OC_TEST - MOCO_TINY_TEMP):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("test ", _member);
			break;
		}
		case (OC_TEST - MOCO_TINY_LOCAL):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("test ", _member);
			break;
		}
		case (OC_TEST - MOCO_TINY_MEMBER):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("test m", _member);
			break;
		}
		case (OC_TEST - MOCO_TEMP):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("test ", _member);
			break;
		}
		case (OC_TEST - MOCO_LOCAL):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("test ", _member);
			break;
		}
		case (OC_TEST - MOCO_MEMBER):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("test m", _member);
			break;
		}
		case (OC_PUSH - MOCO_TINY_TEMP):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("push ", _member);
			break;
		}
		case (OC_PUSH - MOCO_TINY_LOCAL):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("push ", _member);
			break;
		}
		case (OC_PUSH - MOCO_TINY_MEMBER):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("push m", _member);
			break;
		}
		case (OC_PUSH - MOCO_TEMP):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("push ", _member);
			break;
		}
		case (OC_PUSH - MOCO_LOCAL):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("push ", _member);
			break;
		}
		case (OC_PUSH - MOCO_MEMBER):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("push m", _member);
			break;
		}
		case (OC_UNDEFINE - MOCO_TINY_TEMP):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("undf ", _member);
			break;
		}
		case (OC_UNDEFINE - MOCO_TINY_LOCAL):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("undf ", _member);
			break;
		}
		case (OC_UNDEFINE - MOCO_TINY_MEMBER):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("undf m", _member);
			break;
		}
		case (OC_UNDEFINE - MOCO_TEMP):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("undf ", _member);
			break;
		}
		case (OC_UNDEFINE - MOCO_LOCAL):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("undf ", _member);
			break;
		}
		case (OC_UNDEFINE - MOCO_MEMBER):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("undf m", _member);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_TINY_TEMP):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_TINY_LOCAL):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_TINY_MEMBER):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			print_all("exec m", _member);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_TEMP):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("exec ", _member);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_LOCAL):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("exec ", _member);
			break;
		}
		case (OC_EXECUTE_VOID - MOCO_MEMBER):
		{
			auto _member = read<member_index_t>(_cursor);
			print_all("exec m", _member);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_TINY_TEMP):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_TINY_LOCAL):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_TINY_MEMBER):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_TEMP):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_LOCAL):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT_VOID - MOCO_MEMBER):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member, " ", _count);
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_TINY_TEMP):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_TINY_LOCAL):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_TINY_MEMBER):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_TEMP):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_LOCAL):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT_VOID - MOCO_MEMBER):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member, " ", _count);
			_cursor += _count;
			break;
		}
		/** MM-Type */
		case (OC_EXECUTE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec m", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec m", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec m", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec m", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec m", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec m", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec ", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec ", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec m", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec m", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("exec m", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec m", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec m", _member0, " ", _member1);
			break;
		}
		case (OC_EXECUTE - (MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("exec m", _member0, " m", _member1);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_COUNT - (MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " m", _member1, " ", _count);
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec ", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " ", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_EXECUTE_FORMAT - (MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _count = read<framework::member::parameter_count_t>(_cursor);
			print_all("exec m", _member0, " m", _member1, " ", _count);
			_cursor += _count;
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln m", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln m", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln m", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln m", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln m", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln m", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln ", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln ", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln m", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln m", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cln m", _member0, " m", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln m", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln m", _member0, " ", _member1);
			break;
		}
		case (OC_CLONE - (MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cln m", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref m", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref m", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref m", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref m", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref m", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref m", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref ", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref ", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref m", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref m", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("ref m", _member0, " m", _member1);
			break;
		}
		case (OC_REFER - (MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref m", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref m", _member0, " ", _member1);
			break;
		}
		case (OC_REFER - (MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("ref m", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy m", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy m", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy m", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy m", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy m", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy m", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy ", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy ", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy m", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy m", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			print_all("cpy m", _member0, " m", _member1);
			break;
		}
		case (OC_COPY - (MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy m", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy m", _member0, " ", _member1);
			break;
		}
		case (OC_COPY - (MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			print_all("cpy m", _member0, " m", _member1);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_TEST_MEMBER - (MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMP * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_VOID - (MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _operator);
			break;
		}
		/** MI-Type */
		case (OC_INSTANTIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			print_all("inst ", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_INSTANTIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			print_all("inst m", _member, " i", _immediate);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE - (MOCO_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("test m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_TEST_IMMEDIATE_REVERSE - (MOCO_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("testr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TINY_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_TEMP * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_LOCAL * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE_VOID - (MOCO_MEMBER * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member, " i", _immediate, " ", _operator);
			break;
		}
		/** MMint-Type */
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr ", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " ", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int32_t>(_cursor);
			print_all("membr m", _member0, " m", _member1, " i", _int);
			break;
		}
		case (OC_OBJECT_MEMBER - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IIOCO_COUNT + IIOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _int = read<int8_t>(_cursor);
			print_all("membr m", _member0, " m", _member1, " i", _int);
			break;
		}
		/** MMM-Type */
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TINY_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<tiny_member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_TEMP)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_LOCAL)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " ", _member2, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * MOCO_COUNT + MOCO_MEMBER)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _member2 = read<member_index_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " m", _member2, " ", _operator);
			break;
		}
		/** MMI-Type */
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("opr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TINY_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<tiny_member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_TEMP * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_LOCAL * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr ", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TINY_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<tiny_member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_TEMP) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_LOCAL) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " ", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT32)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int32_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT8)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int8_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_INT64)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<int64_t>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_FLOAT)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = read<double>(_cursor);
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		case (OC_OPERATOR_CALL_IMMEDIATE_REVERSE - ((MOCO_MEMBER * MOCO_COUNT + MOCO_MEMBER) * IOCO_COUNT + IOCO_STRING)):
		{
			auto _member0 = read<member_index_t>(_cursor);
			auto _member1 = read<member_index_t>(_cursor);
			auto _immediate = _string_manager.string<char>(read<string_manager::index_t>(_cursor));
			auto _operator = read<framework::operator_t>(_cursor);
			print_all("oprr m", _member0, " m", _member1, " i", _immediate, " ", _operator);
			break;
		}
		default:
			BIA_IMPLEMENTATION_ERROR;
		}
		/*********GENERATED BY 'generateVM.py'**********/
	}
}

}
}
}