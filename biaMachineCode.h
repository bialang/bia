#pragma once

#include <cstdint>
#include <cstddef>

#include "biaMachineContext.h"
#include "biaByteStream.h"


namespace bia
{
namespace machine
{

class BiaMachineCode
{
public:
	/**
	 * Constructor.
	 * 
	 * @param	p_machineCode	Defines the machine code generated by a suitable compiler.
	 */
	BiaMachineCode(stream::BiaByteStream p_machineCode);
	/**
	 * Move-Constructor.
	 * 
	 * @remarks	The moved object will be invalidated after the operation.
	 * 
	 * @param	[in,out]	p_move	Defines the object that should be moved.
	 */
	BiaMachineCode(BiaMachineCode && p_move);
	BiaMachineCode(const BiaMachineCode&) = delete;
	~BiaMachineCode();

	/**
	 * Executes the machine code.
	 * 
	 * @since	3.42.93.562
	 * @date	14-Dec-2017
	 * 
	 * @param	[in]	p_context	Defines the machine context.
	 */
	void Execute(BiaMachineContext & p_context) const;
	/**
	 * Checks wheter the parameter passed to the constructor was valid or not.
	 * 
	 * @remarks	This function does not check if the machine code itself is valid.
	 * 
	 * @since	3.42.93.562
	 * @date	14-Dec-2017
	 * 
	 * @return	true if the machine code is valid, otherwise false.
	 */
	bool IsValid() const;

private:
	typedef int(*entry_point)(BiaMachineContext*);

	entry_point m_run;	/**	If non-null, defines the entry point of the machine code.	*/

	size_t m_iSize;	/**	Defines the size of the entry point.	*/
};

}
}