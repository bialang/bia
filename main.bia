auto sy = system("pause")

print(sy)

#>
var output = string("")

input("geb was ein: ", output)

system(output)

export fun foo() {
	return 3
}

export function foo: return 3
export default fun: return "hi"
import module_default, { foo } from "./module"

var obj = {
	file: "hi",
	type: "file"
}

auto [file, type] = obj



export output
export default output

import sqlite3
import hashlib

var con = sqlite3.connect("file.db")

if not con.is_valid()

con.execute("CREAT...")
con.create_function("md5", fun(x) return hashlib.md5.update(x).hexdigest();)

con.execute("SELECT md5('hello');")
con.close()

import thread

var t1 = thread(fun() {
	while not thread.interrupted() {
		print("hi")
		thread.sleep(0.5s)
	}
})

t1.start()

thread.sleep(50s)
t1.interrupt()

t1.join()

#>
fun quadrat(x) {
	return x**x
}

#disassemble(quadrat)
#quadrat()
var mein_x = 0

until mein_x == 4096 {
	var mein_y = quadrat(mein_x)
	#print(quadrat(mein_x))
	mein_x += 1
}

print(mein_y)

#print(quadrat(2))
#print(quadrat(16))

#>
var sum = 0
var i = 0

var start = time()

while i < 1000000 {
	var t = i % 3
	
	if t sum += i * t
	else sum /= i + 1

	i += 1
}

print(time() - start)
print(sum)

#>print(2)

fun foo {
	print(0)
}

foo()
print(foo)

#>

fun range(a, b=null) {
	if b is null {
		for a times {
			yield .loop_count
		}
	} else {
		for b - a times with i = a {
			yield i
		}
	}
}

for i in range(3) {
	print(i)

	break after 2 times
}

class iterator : object
{
	version = "2.0.0.0"

	iterator(val) {
		print("constructed iterator")
		this.val = val
	}

	fun next() {
		return val--
	}

	static fun version() {
		print("Iterator version:", version)
	}

	fun has_next() {
		return val > 0
	}

	operator +=(t) {
		for t times
			next()
	}

	operator bool {
		return has_next()
	}

	operator <=>(other) {
		return val <=> other.val
	}
}

var it = iterator(3)

iterator.version()

while it {
	print(it += 1)
}

fun call_me(callback) {
	callback()
}

call_me(iterator.version)
call_me(it.next)
call_me(it.operator bool)
call_me(() -> print("hi"))

<#