single_comment ::= "#" any ("#" | NEWLINE)
multi

identifier_char ::= "{Ll}" | "{Lu}" | "{Lt}" | "{Lo}" | "{Pc}" | "{Nl}"
identifier ::= identifier_char (identifier_char | "{Nd}" | "{No}")*

regex ::= /* see regex.ebnf */
number ::= /* see number.ebnf */
value ::= "null" | "true" | "false" | number | calling_statement

rvalue ::= identifier | string | regex | expression
parameter_list ::= expression ("," expression)*
parameter ::= "[" parameter_list "]" | "(" parameter_list? ")"
calling_statement ::= rvalue ("." rvalue)*

stmt ::= simple_stmt
simple_stmt ::= small_stmt (";" small_stmt) ";"? NEWLINE?
small_stmt ::= (expression | decl_stmt | flow_stmt)

decl_stmt ::= "let" identifier "=" value
flow_stmt ::= break_stmt | continue_stmt | return_stmt

break_stmt ::= "break"
continue_stmt ::= "continue"
return_stmt ::= "return" expression?

/*
****************String****************
*/

string ::= raw_string | normal_string | template_string

delimiter ::= L*
raw_string ::= 'R"' delimiter "(" raw_content* ")" delimiter '"'

escape_character ::= "\" ("n" | "r" | "t")
normal_content ::= escape_character | [^"']
normal_string ::= '"' ('\"' | "'" | normal_content)* '"' | "'" ("\'" | '"' | normal_content)* "'"

template_content ::= "${" statement "}"
template_string ::= "`" (normal_content | ["'] | template_content)* "`"

/*
****************Expression****************
*/

dot_operator ::= "*" | "**" | "/" | "//" | "%"
self_operator ::= "~" | "!"
math_term ::= self_operator? (value | "(" expression ")") (dot_operator value)*

weak_operator ::= "+" | "-"
math_expression ::= math_term (weak_operator math_term)*

condition_operator ::= "<" | ">" | "<=" | ">=" | "==" | "!="
condition_expression ::= math_expression (condition_opeartor math_expression)*

bit_operator ::= "&" | "|" | "^"
bit_expression ::= condition_expression (bit_operator condition_expression)*

condition_chain_operator ::= "&&" | "||"
condition_chain_expression ::= bit_expression (condition_chain_operator bit_expression)*

expression ::= condition_chain_expression